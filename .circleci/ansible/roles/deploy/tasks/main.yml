# ---
# - name: "update apt packages."
#   become: yes
#   apt:
#     update_cache: yes

# - name: "upgrade packages"
#   become: yes
#   apt:
#     upgrade: yes

# - name: remove dependencies that are no longer required
#   become: yes
#   apt:
#     autoremove: yes

# - name: "install dependencies."
#   become: yes
#   apt:
#     name: ["nodejs", "npm"]
#     state: latest
#     update_cache: yes

# - name: "install pm2"
#   become: yes
#   npm:
#     name: pm2
#     global: yes
#     production: yes
#     state: present

# - name: Copy compiled files
#   unarchive:
#     src: /root/project/backend.tar.gz
#     dest: /home/ubuntu/

# - name: Build backend
#   ignore_errors: yes
#   shell: |
#     cd /home/ubuntu/backend
#     npm i
#     npm run build

# - name: Stop and delete already running server
#   ignore_errors: yes
#   shell: |
#     pm2 stop backend
#     pm2 delete backend

# - name: "run server"
#   become: true
#   shell : |
#       cd /home/ubuntu/backend
#       npm install
#       pm2 stop default
#       pm2 start npm -- start

---
- name: "Creates backend app directory"
  file: 
    path: ~/backend-app
    state: directory

- name: "Unarchive backend files"
  unarchive: 
    src: artifact.tar.gz
    dest: ~/backend-app

- name: "Installing Node Dependencies"
  shell: |
    cd ~/backend-app
    npm i
- name: "Executing Node app with PM2"
  shell: |
    cd ~/backend-app/dist
    
    cd ../
    npm install
    npm run build
    sudo npm install forever -g
    sudo npm install ts-node -g
    forever start -c "ts-node -r tsconfig-paths/register -r dotenv/config src/main.ts" ./
    register: execute_node
- name: print message
  debug:
    msg: "{{ execute_node.stdout_lines }}"

- name: "Configure pm2 to start as service"
  become: true 
  shell: |
    env PATH=$PATH:/usr/local/bin pm2 startup systemd -u ubuntu --hp /home/ubuntu
  
  environment:
  - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
  - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
  - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
  - TYPEORM_PORT: 5432
  - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
  - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
  - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
  - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
  - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"

# ---
# - name: Create a directory for the project 
#   file:
#     path: /home/ubuntu/node_project
#     state: directory
#     mode: '0755'

# - name: Extract backend files into /etc/node_project
#   unarchive:
#     src: /tmp/artifact.tar.gz 
#     dest: /home/ubuntu/node_project
#   register: untar

# - name: Remove tar file 
#   ansible.builtin.file:
#     path: /home/ubuntu/artifact.tar.gz
#     state: absent

# - name: serve file
#   shell: |
#     npm install
#     pm2 stop default
#     pm2 start npm -- start
#   args:
#     chdir: /home/ubuntu/node_project
#   environment:
#   - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
#   - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
#   - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
#   - TYPEORM_PORT: 5432
#   - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
#   - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
#   - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
#   - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
#   - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"
